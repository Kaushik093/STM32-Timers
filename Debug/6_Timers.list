
6_Timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000338  08000340  00001340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000338  08000338  00001340  2**0
                  CONTENTS
  4 .ARM          00000000  08000338  08000338  00001340  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000338  08000340  00001340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000338  08000338  00001338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800033c  0800033c  0000133c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000340  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000340  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004c3  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000133  00000000  00000000  00001833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00001968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000040  00000000  00000000  000019d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e8f7  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c9c  00000000  00000000  00010307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053260  00000000  00000000  00010fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00064203  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000088  00000000  00000000  00064248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000642d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000320 	.word	0x08000320

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000320 	.word	0x08000320

080001d4 <main>:
#include <stdio.h>
#include <timer.h>



int main(void){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	timer2_pa5_output_compare();
 80001d8:	f000 f804 	bl	80001e4 <timer2_pa5_output_compare>
 80001dc:	2300      	movs	r3, #0
}
 80001de:	4618      	mov	r0, r3
 80001e0:	bd80      	pop	{r7, pc}
	...

080001e4 <timer2_pa5_output_compare>:
#define CCER_CC1E	(1U<<0)

#define GPIOAEN		(1U<<0)
#define AFR5_TIM	(1U<<20)

void timer2_pa5_output_compare(void){
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0

	//Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80001e8:	4b24      	ldr	r3, [pc, #144]	@ (800027c <timer2_pa5_output_compare+0x98>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001ec:	4a23      	ldr	r2, [pc, #140]	@ (800027c <timer2_pa5_output_compare+0x98>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6313      	str	r3, [r2, #48]	@ 0x30

	//Set PA5 to alternate function mode
	GPIOA->MODER &= ~(1U<<10);
 80001f4:	4b22      	ldr	r3, [pc, #136]	@ (8000280 <timer2_pa5_output_compare+0x9c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a21      	ldr	r2, [pc, #132]	@ (8000280 <timer2_pa5_output_compare+0x9c>)
 80001fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80001fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=  (1U<<11);
 8000200:	4b1f      	ldr	r3, [pc, #124]	@ (8000280 <timer2_pa5_output_compare+0x9c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a1e      	ldr	r2, [pc, #120]	@ (8000280 <timer2_pa5_output_compare+0x9c>)
 8000206:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800020a:	6013      	str	r3, [r2, #0]

	//Set alternate function to TIM2_CH1 (AF0)
	GPIOA->AFR[0] |= AFR5_TIM;
 800020c:	4b1c      	ldr	r3, [pc, #112]	@ (8000280 <timer2_pa5_output_compare+0x9c>)
 800020e:	6a1b      	ldr	r3, [r3, #32]
 8000210:	4a1b      	ldr	r2, [pc, #108]	@ (8000280 <timer2_pa5_output_compare+0x9c>)
 8000212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000216:	6213      	str	r3, [r2, #32]

	//Enable clock access to timer2
	RCC->APB1ENR |= TIM2_EN;
 8000218:	4b18      	ldr	r3, [pc, #96]	@ (800027c <timer2_pa5_output_compare+0x98>)
 800021a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800021c:	4a17      	ldr	r2, [pc, #92]	@ (800027c <timer2_pa5_output_compare+0x98>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6413      	str	r3, [r2, #64]	@ 0x40

	//Set pre-scaler value
	TIM2->PSC = 1600 - 1;
 8000224:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000228:	f240 623f 	movw	r2, #1599	@ 0x63f
 800022c:	629a      	str	r2, [r3, #40]	@ 0x28

	//Set auto-reload value
	TIM2->ARR = 10000 - 1;
 800022e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000232:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000236:	62da      	str	r2, [r3, #44]	@ 0x2c

	//Set output compare toggle mode
	TIM2->CCMR1 |= OC_TOGGLE ;   ///Check with | symbol
 8000238:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000242:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000246:	6193      	str	r3, [r2, #24]

	//Enable TIM2 CH1 in compare mode
	TIM2->CCER |= CCER_CC1E;
 8000248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800024c:	6a1b      	ldr	r3, [r3, #32]
 800024e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000252:	f043 0301 	orr.w	r3, r3, #1
 8000256:	6213      	str	r3, [r2, #32]

	//Clear counter
	TIM2->CNT = 0;
 8000258:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800025c:	2200      	movs	r2, #0
 800025e:	625a      	str	r2, [r3, #36]	@ 0x24

	//Enable counter
	TIM2->CR1 |= TIM2_EN;
 8000260:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6013      	str	r3, [r2, #0]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40023800 	.word	0x40023800
 8000280:	40020000 	.word	0x40020000

08000284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000284:	480d      	ldr	r0, [pc, #52]	@ (80002bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000286:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800028c:	480c      	ldr	r0, [pc, #48]	@ (80002c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800028e:	490d      	ldr	r1, [pc, #52]	@ (80002c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000290:	4a0d      	ldr	r2, [pc, #52]	@ (80002c8 <LoopForever+0xe>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800029c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a2:	4a0a      	ldr	r2, [pc, #40]	@ (80002cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a4:	4c0a      	ldr	r4, [pc, #40]	@ (80002d0 <LoopForever+0x16>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b2:	f000 f811 	bl	80002d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ff8d 	bl	80001d4 <main>

080002ba <LoopForever>:

LoopForever:
  b LoopForever
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
  ldr   r0, =_estack
 80002bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c8:	08000340 	.word	0x08000340
  ldr r2, =_sbss
 80002cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC_IRQHandler>
	...

080002d8 <__libc_init_array>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	4d0d      	ldr	r5, [pc, #52]	@ (8000310 <__libc_init_array+0x38>)
 80002dc:	4c0d      	ldr	r4, [pc, #52]	@ (8000314 <__libc_init_array+0x3c>)
 80002de:	1b64      	subs	r4, r4, r5
 80002e0:	10a4      	asrs	r4, r4, #2
 80002e2:	2600      	movs	r6, #0
 80002e4:	42a6      	cmp	r6, r4
 80002e6:	d109      	bne.n	80002fc <__libc_init_array+0x24>
 80002e8:	4d0b      	ldr	r5, [pc, #44]	@ (8000318 <__libc_init_array+0x40>)
 80002ea:	4c0c      	ldr	r4, [pc, #48]	@ (800031c <__libc_init_array+0x44>)
 80002ec:	f000 f818 	bl	8000320 <_init>
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	10a4      	asrs	r4, r4, #2
 80002f4:	2600      	movs	r6, #0
 80002f6:	42a6      	cmp	r6, r4
 80002f8:	d105      	bne.n	8000306 <__libc_init_array+0x2e>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000300:	4798      	blx	r3
 8000302:	3601      	adds	r6, #1
 8000304:	e7ee      	b.n	80002e4 <__libc_init_array+0xc>
 8000306:	f855 3b04 	ldr.w	r3, [r5], #4
 800030a:	4798      	blx	r3
 800030c:	3601      	adds	r6, #1
 800030e:	e7f2      	b.n	80002f6 <__libc_init_array+0x1e>
 8000310:	08000338 	.word	0x08000338
 8000314:	08000338 	.word	0x08000338
 8000318:	08000338 	.word	0x08000338
 800031c:	0800033c 	.word	0x0800033c

08000320 <_init>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

0800032c <_fini>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr
